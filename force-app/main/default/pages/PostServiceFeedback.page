<!--
@description       : 
@author            : ChangeMeIn@UserSettingsUnder.SFDoc
@group             : 
@last modified on  : 07-17-2025
@last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
-->
<apex:page controller="PSFController" showHeader="false" sidebar="false" standardStylesheets="false">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    </head>
    <apex:includeScript value="/soap/ajax/43.0/connection.js"/>
    <apex:includeScript value="/soap/ajax/43.0/apex.js"/>
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background-color: #f9f9f9;
        }
        
        .header { 
            background-color: #037CB5;
            color: white;
            padding: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            margin-top: 5%;
        }
        
        .header-logo {
            position: absolute;
            left: 60px;
            height: 80px;
            width: 70px;      
        }
        
        .highlight {
            color: #f7ec2a;
        }
        
        .user-name {
            font-size: 30px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
         /* Responsive adjustments */
    @media (max-width: 768px) {
        .header-logo {
            position: static;
            margin-bottom: 10px;
        }

        .header {
            flex-direction: column;
            padding: 16px;
        }

        .user-name {
            font-size: 22px;
            margin-top: 10px;
        }

        #feedbackForm {
            display:block;
            margin: 40px auto;
            justify-content: center;
        }
        

        .question-card {
            width: 100%;
        }

        textarea {
            font-size: 13px;
        }

        h2 {
            font-size: 22px;
        }

        p {
            font-size: 16px;
        }
    }

         @media (max-width: 480px) {
        .user-name {
            font-size: 20px;
        }

        #feedbackForm {
            display: flex;
            flex-direction: column;
            margin: 1%;
        }

        .header-logo {
            height: 55px;
            width: 50px;
        }

        #submitBtn {
            font-size: 14px;
            padding: 12px 20px;
        }

        .question-title {
            font-size: 16px;
        }
    }
        
        h2 { 
            font-size: 24px; 
            margin-top: 40px; 
        }
        
        p { 
            font-size: 18px; 
            color: #666; 
            margin-bottom: 30px; 
        }
        
        #feedbackForm {
            display: grid;
            grid-template-columns: repeat(2, auto);
            gap: 20px;
            padding: 20px;
            margin: 40px auto;
            justify-content: center;
        }
        
        .question-card {
            background: #fff;
            border-radius: 8px;  
            border: 2px solid black;      
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 20px;
            transition: transform .2s, box-shadow .2s;
            width: 300px;
        }
        
        #feedbackForm .question-card:nth-child(7) {
            grid-column: span 2;
            justify-self: center;
        }
        
        .question-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.1);
        }
        
        .question-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
            color: #333;
        }
        
        .stars {
            display: flex;
            font-size: 1.8em;
            color: #ccc;
            cursor: pointer;
            margin-bottom: 12px;
        }
        
        .star {
            margin-right: 6px;
            transition: color .2s;
        }
        
        .star.selected,
        .star:hover,
        .star:hover ~ .star {
            color: #FFD700;
        }
        
        .option-group {
            display: flex;
            gap: 12px;
            margin-bottom: 10px;
        }
        
        .option-group button {
            flex: 1;
            background: #f0f0f0;
            border: 1px solid #ccc;
            padding: 8px 16px;
            border-radius: 4px;
            transition: background .2s, border-color .2s;
            cursor: pointer;
        }
        
        .option-group button.selected {
            background: #037CB5;
            color: #fff;
            border-color: #037CB5;
        }
        
        #submitBtnWrapper {
            text-align: center;
            margin: 30px 0;     
        }
        
        #submitBtn {
            background-color: #037CB5;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        #submitBtn:hover:not(:disabled) {
            background-color: #0369a0;
        }
        
        #submitBtn:disabled {
            background-color: #ccc;
            color: #666;
            cursor: not-allowed;
        }
        
        textarea {
            width: 100%;
            min-height: 80px;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            font-size: 14px;
            resize: vertical;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        
        .success-message,
        .expired-message {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            min-height: 80vh;
            padding: 20px;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .success-checkmark,
        .expired-icon {
            font-size: 48px;
            color: #28a745;
            margin-bottom: 16px;
        }
        
        .expired-icon {
            color: #dc3545;
        }
        
        .success-message h2,
        .expired-message h2 {
            font-size: 28px;
            margin: 10px 0;
            color: #333;
        }
        
        .success-message p,
        .expired-message p {
            font-size: 16px;
            color: #666;
            max-width: 500px;
            line-height: 1.5;
            text-align: center; 
            margin: 0 auto;    
        }
        
         #errorMessage {
             color: #dc3545;
             font-weight: bold;
             margin-top: 10px;
             text-align: center;
             padding: 10px;
         }
         
         .required-comment {
             border: 2px solid #dc3545 !important;
             background-color: #fff5f5;
         }
         
         .comment-required-message {
             color: #dc3545;
             font-size: 12px;
             margin-top: 4px;
             font-weight: bold;
         }
    </style>
    
    <div class="header">
        <img src="{!URLFOR($Resource.Ride_River_Logo_LWC)}" alt="Ride River Logo" class="header-logo" />
        
        <apex:outputPanel rendered="{!NOT(ISNULL(primaryContact))}">
            <div class="user-name"><span class="highlight">Hi!</span> {!primaryContact.Name}</div>
        </apex:outputPanel>
    </div>
    
    <!-- Main Content -->
    <div id="mainContent" style="text-align: center;">
        <h2>We'd love your feedback!</h2>
        <p style="font-size: 20px;">
            We're always looking to improve your River experience.<br/>
            <!-- Share your thoughts to help us keep getting better. -->
            Share a quick rating to help us keep getting better.
        </p>
        
        <div id="feedbackForm">
            <!-- Questions will be dynamically rendered here -->
        </div>
        
        <!-- Additional Comments Section -->
        <div class="question-card" style="grid-column: span 2; justify-self: center; width: 640px;">
            <div class="question-title">Additional Comments</div>
            <textarea id="additionalComments" 
                placeholder="Write your comments here..."
                style="width: 100%; min-height: 80px;"></textarea>
        </div>
        
        <div id="submitBtnWrapper">
            <button id="submitBtn" disabled="disabled">Submit Feedback</button>
        </div>
    </div>
    
    <!-- Success Message for first submission -->
    <div class="success-message" id="thankYouMessage" style="display:none;">
        <div class="success-checkmark">✓</div>
        <h2>Thank You for Your Feedback!</h2>
        <p>We appreciate you taking the time to share your experience with us.<br/>
            Your feedback helps us improve our services.
        </p>
    </div>
    
    <!-- Already Submitted Message -->
    <div class="success-message" id="alreadySubmittedMessage" style="display:none;">
        <div class="success-checkmark">✓</div>
        <h2>Feedback Already Submitted</h2>
        <p>Thanks for sharing your thoughts! We've already received your feedback.<br/>
            If you need to update or have more to say, feel free to contact our team.
        </p>
    </div>
    
    <!-- Expired Message -->
    <div class="expired-message" id="expiredMessage" style="display:none;">
        <div class="expired-icon">⚠</div>
        <h2>Oops! This Link isn't active anymore</h2>
        <p>Looks like this feedback link has expired or been used already.</p>
    </div>
    
    <div id="errorMessage"></div>

    <!-- JavaScript -->
    <script>
        let leadId = null;
        let responseId = null;
        const responses = {};
        
        const questions = [
            { id: 'q1', text: 'Did you receive a call from the Service Team after your Indie was serviced?', type: 'yesno' },
            { id: 'q2', text: 'How convenient was it to schedule a service appointment for your Indie?', type: 'stars' },
            { id: 'q3', text: 'How helpful was the Service Advisor in resolving your issues?', type: 'stars' },
            { id: 'q4', text: 'Were the job card and invoice provided and explained to you?', type: 'yesno' },
            { id: 'q5', text: 'How clean was the delivered vehicle after service?', type: 'stars' },
            { id: 'q6', text: 'How effectively was your issue resolved during the service?', type: 'stars' },
            { id: 'q7', text: 'Was your Indie\'s service completed on time?', type: 'yesno' }
            /*{ id: 'q7', text: 'Was your Indie service completed on time?', type: 'yesno' }*/
        ];
        
        function getUrlParameter(name) {
            const params = new URLSearchParams(window.location.search);
            return params.get(name);
        }
        
        function renderQuestions() {
            const form = document.getElementById('feedbackForm');
            form.innerHTML = '';
        
             questions.forEach(q => {
                 const container = document.createElement('div');
                 container.classList.add('question-card');
                 container.setAttribute('data-question-id', q.id);
        
                const label = document.createElement('div');
                label.textContent = q.text;
                label.className = 'question-title';
                container.appendChild(label);
        
                // Initialize response structure for this question
                responses[q.id] = {
                    Question__c: q.text,
                    Answer__c: null,
                    Rating__c: null,
                    Comments__c: '',
                    Question_Type__c: q.type
                };
        
                if (q.type === 'stars') {
                    const starDiv = document.createElement('div');
                    starDiv.className = 'stars';
        
                     const commentBox = document.createElement('textarea');
                     commentBox.placeholder = 'What did not work?';
                     commentBox.style.width = '100%';
                     commentBox.style.marginTop = '8px';
                     commentBox.style.display = 'none';
                     commentBox.style.border = '1px solid #ccc';
                     commentBox.style.borderRadius = '4px';
                     commentBox.style.padding = '8px';
                     commentBox.required = true;
                     container.appendChild(commentBox);
        
                    for (let i = 1; i <= 5; i++) {
                        const star = document.createElement('span');
                        star.innerHTML = '★';
                        star.className = 'star';
                        star.setAttribute('data-value', i);
        
                        star.addEventListener('click', () => {
                            responses[q.id].Rating__c = i;
                            responses[q.id].Answer__c = i.toString();
                            responses[q.id].Selected_Option__c = null;
        
                            updateStars(starDiv, i);
        
                            if (i <= 3) {
                                commentBox.style.display = 'block';
                            } else {
                                commentBox.style.display = 'none';
                                commentBox.value = '';
                                responses[q.id].Comments__c = '';
                            }
        
                            checkCompletion();
                        });
        
                        starDiv.appendChild(star);
                    }
        
                     commentBox.addEventListener('input', function() {
                         responses[q.id].Comments__c = commentBox.value;
                         checkCompletion();
                     });
         
                     container.appendChild(starDiv);
                } else if (q.type === 'yesno') {
                    const buttonContainer = document.createElement('div');
                    buttonContainer.classList.add('option-group');
        
                     const commentBox = document.createElement('textarea');
                     commentBox.placeholder = 'What did not work?';
                     commentBox.style.width = '100%';
                     commentBox.style.marginTop = '8px';
                     commentBox.style.display = 'none';
                     commentBox.style.border = '1px solid #ccc';
                     commentBox.style.borderRadius = '4px';
                     commentBox.style.padding = '8px';
                     commentBox.required = true;
                     container.appendChild(commentBox);
        
                    ['Yes', 'No'].forEach(option => {
                        const btn = document.createElement('button');
                        btn.textContent = option;
                        btn.type = 'button';
        
                        btn.addEventListener('click', () => {
                            responses[q.id].Selected_Option__c = option;
                            responses[q.id].Answer__c = option;
                            responses[q.id].Rating__c = null;
        
                            highlightSelected(btn, buttonContainer);
        
                            if (option === 'No') {
                                commentBox.style.display = 'block';
                            } else {
                                commentBox.style.display = 'none';
                                commentBox.value = '';
                                responses[q.id].Comments__c = '';
                            }
        
                            checkCompletion();
                        });
        
                        buttonContainer.appendChild(btn);
                    });
        
                     commentBox.addEventListener('input', function() {
                         responses[q.id].Comments__c = commentBox.value;
                         checkCompletion();
                     });
         
                     container.appendChild(buttonContainer);
                }
        
                form.appendChild(container);
            });
        }
        
        function updateStars(container, value) {
            const stars = container.querySelectorAll('.star');
            stars.forEach(star => {
                const val = parseInt(star.getAttribute('data-value'));
                if (val <= value) {
                    star.style.color = '#FFD700';
                    star.classList.add('selected');
                } else {
                    star.style.color = '#ccc';
                    star.classList.remove('selected');
                }
            });
        }
        
        function highlightSelected(selectedButton, container) {
            const buttons = container.querySelectorAll('button');
            buttons.forEach(btn => {
                btn.classList.remove('selected');
            });
            selectedButton.classList.add('selected');
        }
        
         function checkCompletion() {
            debugger;
             let allAnswered = true;
             let hasValidationErrors = false;
             
             // Clear previous error messages
             document.querySelectorAll('.comment-required-message').forEach(msg => msg.remove());
             document.querySelectorAll('.required-comment').forEach(el => {
                 el.classList.remove('required-comment');
                 el.style.backgroundColor = '';
             });
             
             questions.forEach(q => {
                 const response = responses[q.id];
                 if (!response || (response.Rating__c === null && response.Selected_Option__c === null)) {
                     allAnswered = false;
                     console.log('allAnswered : ' + allAnswered);
                 } else {
                     // Check if "No" was selected and comment is required
                     if (q.type === 'yesno' && response.Selected_Option__c === 'No') {
                         if (!response.Comments__c || response.Comments__c.trim() === '') {
                             hasValidationErrors = true;
                             addCommentRequiredIndicator(q.id, 'Comment is required when selecting "No"');
                         }
                     }
                     // Check if low rating (1-3) was selected and comment is required
                     if (q.type === 'stars' && response.Rating__c !== null && response.Rating__c <= 3) {
                         if (!response.Comments__c || response.Comments__c.trim() === '') {
                             hasValidationErrors = true;
                             addCommentRequiredIndicator(q.id, 'Comment is required for ratings 1-3');
                         }
                     }
                 }
             });
         
             const submitBtn = document.getElementById('submitBtn');
             if (allAnswered && !hasValidationErrors) {
                 submitBtn.disabled = false;
             } else {
                 submitBtn.disabled = true;
             }
         }
         
         function addCommentRequiredIndicator(questionId, message) {
             const questionCard = document.querySelector(`[data-question-id="${questionId}"]`);
             if (questionCard) {
                 const commentBox = questionCard.querySelector('textarea');
                 if (commentBox) {
                     commentBox.classList.add('required-comment');
                     
                     // Add error message if not already present
                     if (!commentBox.nextElementSibling || !commentBox.nextElementSibling.classList.contains('comment-required-message')) {
                         const errorMsg = document.createElement('div');
                         errorMsg.className = 'comment-required-message';
                         errorMsg.textContent = message;
                         commentBox.parentNode.insertBefore(errorMsg, commentBox.nextSibling);
                     }
                 }
             }
         }
        
        function showErrorAndDisable(message) {
            const errorEl = document.getElementById('errorMessage');
            if (errorEl) {
                errorEl.innerText = message;
            }
            document.getElementById('submitBtn').disabled = true;
        }
        
        function isLinkExpired(sentDateTime) {
            const sentDate = new Date(sentDateTime);
            const currentDate = new Date();
            const diffHours = Math.abs(currentDate - sentDate) / 36e5;
            return false;
        }
        
        function showExpiredMessage() {
            document.getElementById('mainContent').style.display = 'none';
            document.getElementById('thankYouMessage').style.display = 'none';
            document.getElementById('alreadySubmittedMessage').style.display = 'none';
            document.getElementById('expiredMessage').style.display = 'block';
        }
        
        function showAlreadySubmittedMessage() {
            document.getElementById('mainContent').style.display = 'none';
            document.getElementById('thankYouMessage').style.display = 'none';
            document.getElementById('alreadySubmittedMessage').style.display = 'block';
            document.getElementById('expiredMessage').style.display = 'none';
        }
        
        function showThankYouMessage() {
            document.getElementById('mainContent').style.display = 'none';
            document.getElementById('thankYouMessage').style.display = 'block';
            document.getElementById('alreadySubmittedMessage').style.display = 'none';
            document.getElementById('expiredMessage').style.display = 'none';
        }
        
        function checkExistingFeedback() {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.PSFController.checkExistingFeedback}',
                leadId,
                function(result, event) {
                    if (event.status) {
                        if (result) {
                            if (result.Sent_Date_Time__c) {
                                const isExpired = isLinkExpired(result.Sent_Date_Time__c);
                                if (isExpired) {
                                    showExpiredMessage();
                                    return;
                                }
                            }
                            
                            if (result.Response_Status__c && result.Response_Status__c.toLowerCase() === 'submitted') {
                                showAlreadySubmittedMessage();
                                return;
                            }
                            
                            responseId = result.Id;
                            renderQuestions();
                        } else {
                            initializeFeedbackSession();
                        }
                    } else {
                        console.error('Error checking existing feedback:', event.message);
                        showErrorAndDisable('Error loading feedback form.');
                    }
                }
            );
        }
        
        function initializeFeedbackSession() {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.PSFController.createEmptyResponse}',
                leadId,
                function(newId, event) {
                    if (event.status && newId !== null) {
                        responseId = newId;
                        renderQuestions();
                    } else {
                        showErrorAndDisable('Failed to initialize feedback session.');
                    }
                }
            );
        }
        
         function submitFeedback() {
             if (!responseId) {
                 alert('Feedback session not initialized.');
                 return;
             }
             
             // Final validation before submission
             let validationErrors = [];
             questions.forEach(q => {
                 const response = responses[q.id];
                 if (!response || (response.Rating__c === null && response.Selected_Option__c === null)) {
                     validationErrors.push(`Please answer: ${q.text}`);
                 } else {
                     // Check if "No" was selected and comment is required
                     if (q.type === 'yesno' && response.Selected_Option__c === 'No') {
                         if (!response.Comments__c || response.Comments__c.trim() === '') {
                             validationErrors.push(`Please provide a comment for: ${q.text}`);
                         }
                     }
                     // Check if low rating (1-3) was selected and comment is required
                     if (q.type === 'stars' && response.Rating__c !== null && response.Rating__c <= 3) {
                         if (!response.Comments__c || response.Comments__c.trim() === '') {
                             validationErrors.push(`Please provide a comment for: ${q.text}`);
                         }
                     }
                 }
             });
             
             if (validationErrors.length > 0) {
                 alert('Please complete the following:\n\n' + validationErrors.join('\n'));
                 return;
             }
         
             const additionalComments = document.getElementById('additionalComments').value || '';
             
             console.log('Submitting feedback with responseId:', responseId);
             console.log('Responses data:', JSON.stringify(responses, null, 2));
             
             // Convert responses to FeedbackResponsesWrapper structure
             const responsesWrapper = {
                 responses: []
             };
             
             // Convert the responses object to the wrapper format
             Object.keys(responses).forEach(key => {
                 const response = responses[key];
                 responsesWrapper.responses.push({
                     question: response.Question__c,
                     Rating: response.Rating__c,
                     SelectedOption: response.Selected_Option__c,
                     Comments: response.Comments__c,
                     Answer: response.Answer__c
                 });
             });
             
             console.log('Converted to FeedbackResponsesWrapper:', JSON.stringify(responsesWrapper, null, 2));
         
             // Use the updated saveFeedback method with FeedbackResponsesWrapper
             Visualforce.remoting.Manager.invokeAction(
                 '{!$RemoteAction.PSFController.saveFeedback}',
                 responseId,
                 responsesWrapper,  // FeedbackResponsesWrapper
                 leadId,
                 window.location.href,
                 additionalComments,
                 function(result, event) {
                     if (event.status) {
                         showThankYouMessage();
                     } else {
                         alert('There was an error submitting your feedback: ' + event.message);
                         console.error('Submission error:', event);
                     }
                 }
             );
         }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('submitBtn').addEventListener('click', submitFeedback);
            
            leadId = getUrlParameter('id');
            console.log('Lead ID from URL:', leadId);
            
            if (!leadId) {
                showErrorAndDisable('Invalid link. Lead ID not found.');
                return;
            }
            
            checkExistingFeedback();
        });
    </script>
</apex:page>